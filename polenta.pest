/// Ignore
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "//" ~ (!"\n" ~ ANY)* }

/// Atomics
integer    = @{ ASCII_DIGIT+ }
identifier = @{ !"let" ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

/// Unary operations
unary_op = _{ minus }
minus    =  { "-" }

/// Binary operations
bin_op   = _{ add | subtract | multiply | divide | modulo | power | eval }
add      =  { "+" }
subtract =  { "-" }
multiply =  { "*" }
divide   =  { "/" }
modulo   =  { "%" }
power    =  { "^" }
eval     =  { "@" }

/// Expression
expr    =  { atom ~ (bin_op ~ atom)* }
atom    = _{ unary_op? ~ primary }
primary = _{ integer | identifier | "(" ~ expr ~ ")" }

/// Statements
polenta_stmts = { let_poly_stmt | let_stmt | expr_stmt }
expr_stmt     = { expr ~ ";" }
let_stmt      = { "let" ~ identifier ~ "=" ~ expr ~ ";" }
let_poly_stmt = { "let" ~ identifier ~ "(" ~ identifier ~ ")" ~ "=" ~ expr ~ ";" }

/// Main rule
polenta = _{ SOI ~ polenta_stmts+ ~ EOI }
