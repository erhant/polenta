/// An atom is a primary with an optional unary minus.
atom = _{ unary_op? ~ primary }

/// Unary operations
unary_op = _{ minus }
minus    =  { "-" }

/// A primary is either an integer, an identifier, or an expression in parentheses.
primary    = _{ integer | identifier | "(" ~ expr ~ ")" }
integer    = @{ ASCII_DIGIT+ }
identifier = @{ !"let" ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC)* }

/// Binary operations
bin_op   = _{ add | subtract | multiply | divide | modulo | power }
add      =  { "+" }
subtract =  { "-" }
multiply =  { "*" }
divide   =  { "/" }
modulo   =  { "%" }
power    =  { "^" }

expr          = { atom ~ (bin_op ~ atom)* }
let_expr      = { "let" ~ identifier ~ "=" ~ expr ~ ";" }
let_poly_expr = { "let" ~ identifier ~ "(" ~ identifier ~ ")" ~ "=" ~ expr ~ ";" }

WHITESPACE = _{ " " | "\t" | NEWLINE }

polenta_inner =  { let_poly_expr | let_expr | expr }
polenta       = _{ SOI ~ polenta_inner+ ~ EOI }
